{
	"info": {
		"_postman_id": "fef9718d-b082-4a8f-b694-74605291e77d",
		"name": "Hw_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Zad_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body mathes string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Zad_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//parse response body to json\r",
							"let resp_JSON = JSON.parse(responseBody);\r",
							"console.log(\"Response parse\", resp_JSON)\r",
							"//name resp = namerpeq (by hand)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(resp_JSON.name).to.eql(\"Alina\");\r",
							"});\r",
							"//age resp = age req (by hand)\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(resp_JSON.age).to.eql(\"25\");\r",
							"});\r",
							"//salary resp = salary req (by hand)\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(resp_JSON.salary).to.eql(500);\r",
							"});\r",
							"//parse request\r",
							"let req_Data =  request.data;\r",
							"console.log(\"Request parse\", req_Data)\r",
							"//name resp = name req (by req)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(resp_JSON.name).to.eql(req_Data.name);\r",
							"});\r",
							"//age resp = age req (by req)\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(resp_JSON.age).to.eql(req_Data.age);\r",
							"});\r",
							"//salary resp = salary req (by req)\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(resp_JSON.salary).to.eql(parseInt(req_Data.salary));\r",
							"});\r",
							"//print family from response to comsole\r",
							"console.log(\"family\", resp_JSON.family);\r",
							"//u_salary_1_5_year in resp = salary*4 (salaru by req)\r",
							"pm.test(\"Salary_1_5 = salary*4\", function () {\r",
							"    pm.expect(resp_JSON.family.u_salary_1_5_year).to.eql(parseInt(req_Data.salary*4));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "Alina",
							"type": "default"
						},
						{
							"key": "age",
							"value": "25",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Zad_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//parse response body to json\r",
							"let resp_body = pm.response.json();\r",
							"//parse request\r",
							"let req = pm.request.url.query.toObject();\r",
							"//name resp = name req (by req)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(resp_body.name).to.eql(req.name);\r",
							"});\r",
							"//age resp = age req (by req)\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(resp_body.age).to.eql(req.age);\r",
							"});\r",
							"//salary resp = salary req (by req)\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(resp_body.salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"//print family from response to comsole\r",
							"console.log(\"family\", resp_body.famaly)\r",
							"// dog have params names\r",
							"pm.test(\"dog have names\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// dog have params age\r",
							"pm.test(\"dog have age\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//name have param Luky\r",
							"pm.test(\"name have Luky\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//age have params 4\r",
							"pm.test(\"age have 4\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "",
							"value": "",
							"type": "default"
						},
						{
							"key": "",
							"value": "",
							"type": "default"
						},
						{
							"key": "",
							"value": "",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alina&age=25&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Zad_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//parse response body to json\r",
							"let resp_body = pm.response.json();\r",
							"//parse request\r",
							"let req = pm.request.url.query.toObject();\r",
							"//name resp = name req (by req)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(resp_body.name).to.eql(req.name);\r",
							"});\r",
							"//age resp = age req (by req)\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(resp_body.age).to.eql(parseInt(req.age));\r",
							"});\r",
							"//print  to console salary fron resp\r",
							"console.log(\"salary\", req.salary)\r",
							"// print  to console salary from req\r",
							"console.log(\"salary\", resp_body.salary)\r",
							"// print to console 0 elem salary from response\r",
							"console.log(\"0 elem salary\", resp_body.salary[0])\r",
							"// print to console 1 elem salary from response\r",
							"console.log(\"1 elem salary\", resp_body.salary[1])\r",
							"//Salary resp 0 = salary 0 req\r",
							"pm.test(\"Salary resp 0 = salary 0 req\", function () {\r",
							"    pm.expect(resp_body.salary[0]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"//1 elem salary = salary*2 request\r",
							"pm.test(\"1 elem salary = salary*2\", function () {\r",
							"    pm.expect(parseInt(resp_body.salary[1])).to.eql(req.salary*2);\r",
							"});\r",
							"//2 elem salary = salary*3 request\r",
							"pm.test(\"2 elem salary = salary*3\", function () {\r",
							"    pm.expect(parseInt(resp_body.salary[2])).to.eql(req.salary*3);\r",
							"});\r",
							"//transiv in environment name,age,salary\r",
							"pm.environment.set(\"name\", resp_body.name)\r",
							"pm.environment.set(\"age\", resp_body.age)\r",
							"pm.environment.set(\"salary\", resp_body.salary)\r",
							"//написать цикл\r",
							"let arr_len = resp_body.salary.length;\r",
							"for(let step = 0; step < arr_len; step++){\r",
							"    console.log(\"Salary\", resp_body.salary[step]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alina&age=25&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Zad_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//parse response body to json\r",
							"let resp_JSON = JSON.parse(responseBody);\r",
							"console.log(\"Response parse\", resp_JSON)\r",
							"//parse request\r",
							"let req_Data =  request.data;\r",
							"console.log(\"Request parse\", req_Data)\r",
							"//json response have start_qa_salary\r",
							"pm.test(\"json response have start_qa_salary\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//json response have qa_salary_after_6_months\r",
							"pm.test(\"json response have qa_salary_after_6_months \", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//json response have qa_salary_after_12_months\r",
							"pm.test(\"json response have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//json response have qa_salary_after_1.5_year\r",
							"pm.test(\"json response have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//json response have qa_salary_after_3.5_years\r",
							"pm.test(\"json response have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//json response have person\r",
							"pm.test(\"json response have person\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"person\");\r",
							"});\r",
							"//qa_salary_after_12_months = salary*2.7 request\r",
							"pm.test(\"start_qa_salary = salary*2.7\", function () {\r",
							"    pm.expect(resp_JSON.qa_salary_after_12_months).to.eql(req_Data.salary*2.7)\r",
							"});\r",
							"//  json response have qa_salary_after_1.5_year = salary*3.3\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function(){\r",
							"    pm.expect(resp_JSON[\"qa_salary_after_1.5_year\"]).to.eql(req_Data.salary*3.3)\r",
							"    });\r",
							"    //  qa_salary_after_3.5_years = salary*3.8 request (salary from request.)\r",
							"    pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function(){\r",
							"    pm.expect(resp_JSON[\"qa_salary_after_3.5_years\"]).to.eql(req_Data.salary*3.8)\r",
							"    });\r",
							"    //in person, 1 u_name = salary request (salary from request.)\r",
							"    pm.test(\"in person, 1 u_name = salary\", function(){\r",
							"    pm.expect(resp_JSON.person.u_name[1]).to.eql(parseInt(req_Data.salary))\r",
							"    });\r",
							"    //u_age = age request (age from request)\r",
							"  pm.test(\"u_age = age\", function(){\r",
							"    pm.expect(resp_JSON.person.u_age).to.eql(parseInt(req_Data.age))\r",
							"    });\r",
							"//u_salary_5_years = salary*4.2 request\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function(){\r",
							"    pm.expect(resp_JSON.person.u_salary_5_years).to.eql(parseInt(req_Data.salary*4.2))\r",
							"    });\r",
							"    //Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"    for(let key in resp_JSON.person){\r",
							"    console.log(resp_JSON.person[key]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}